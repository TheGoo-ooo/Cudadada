#include "../../../04_RayTracing/moo/host/Ray.h"

#include <iostream>
#include <assert.h>

#include "Device.h"
#include <assert.h>

#include "NbSpheres.h"

#include "../../../04_RayTracing/moo/host/SphereCreator.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

extern __global__ void rayGM(
	float4* ptrDevPixels, int nbSphere, Sphere* ptrDevTabSphere, uint w, uint h, float t);

extern __global__ void rayCM(
	float4* ptrDevPixels, uint w, uint h, float t);

extern __host__ void uploadGPU (Sphere* sphere) ;
/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*-------------------------*\
 |*	Constructeur	    *|
 \*-------------------------*/

Ray::Ray(const Grid& grid, int nbSphere, uint w, uint h, float dt) :
	Animable_I<float4>(grid, w, h, "RayTracing_Cuda_HSBA")
    {
    // Inputs
    this->dt = dt;
    this->nbSphere = nbSphere;

    // Tools
    this->t = 0; // protected dans Animable

    SphereCreator sphereCreator(nbSphere, w, h); // sur la pile
        Sphere* ptrTabSphere = sphereCreator.getTabSphere();
        size_t byteSize = sizeOctetSpheres*nbSphere;

        Device::malloc(&ptrDevTabSphere, byteSize);
        Device::memcpyHToD(ptrDevTabSphere, ptrTabSphere, byteSize);

    //fillGM(w, h);
    fillCM(w, h);
    }

Ray::~Ray()
    {
    // rien
    }

/*-------------------------*\
 |*	Methode		    *|
 \*-------------------------*/

void Ray::fillGM(uint w, uint h)
    {
    SphereCreator sphereCreator(nbSphere, w, h); // sur la pile
    Sphere* ptrTabSphere = sphereCreator.getTabSphere();
    size_t byteSize = sizeOctetSpheres*nbSphere;

    Device::malloc(&ptrDevTabSphere, byteSize);
    Device::memcpyHToD(ptrDevTabSphere, ptrTabSphere, byteSize);
    //SphereCreator possÃ¨de un destructeur. :)
    }

void Ray::fillCM(uint w, uint h)
    {
    SphereCreator sphereCreator(NB_SPHERE, w, h);
    this->ptrDevTabSphere = sphereCreator.getTabSphere();
    uploadGPU(ptrDevTabSphere);
    }

/**
 * Override
 * Call periodicly by the API
 *
 * Note : domaineMath pas use car pas zoomable
 */
void Ray::process(float4* ptrDevPixels, uint w, uint h, const DomaineMath& domaineMath)
    {
    Device::lastCudaError("RayTracing_Cuda (before kernel)"); // facultatif, for debug only, remove for release

    if(CONSTANT_MEMORY)
	{
	rayCM<<<dg,db>>>(ptrDevPixels, w, h, t);
	}
    else
	rayGM<<<dg,db>>>(ptrDevPixels, nbSphere, ptrDevTabSphere, w, h, t);

    Device::lastCudaError("RayTracing_Cuda (after kernel)"); // facultatif, for debug only, remove for release
    }

/**
 * Override
 * Call periodicly by the API
 */
void Ray::animationStep()
    {
    t += dt;
    }
/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/


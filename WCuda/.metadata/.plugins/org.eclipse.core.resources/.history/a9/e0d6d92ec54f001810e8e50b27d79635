#include <iostream>
#include "cudaTools.h"
#include "Device.h"
#include "Indice2D.h"

extern __global__ void kernel(int n, double* d_ary);
extern __global__ void kernel_a(int n, double* d_ary);

double reduction_simple(double* ary, int size){
    double sum = 0.0;
    for (int i = 0; i < size; i++){
	sum += ary[i];
    }
    return sum;
}

__host__ bool slice(void)
    {
    dim3 dg = dim3(64, 1, 1);
    dim3 db = dim3(64, 1, 1);

    int size = 1000000;

    double ary[size];

    for (int i = 0; i < size; i++){
	ary[i] = 0.0;
    }

    double* d_ary;
    cudaMalloc((void**)&d_ary, size*sizeof(double));
    cudaMemcpy(d_ary, ary, size * sizeof(double), cudaMemcpyHostToDevice);

    Device::lastCudaError("slice_host (before)"); // temp debug
    kernel<<<dg,db>>>(size, d_ary);
    Device::lastCudaError("slice_host (after)"); // temp debug

    cudaMemcpy(ary, d_ary, size * sizeof(double), cudaMemcpyDeviceToHost);
    std::cout << "sum :" << (4.0 * reduction_simple(ary, size)) / size << std::endl;

    return true;
    }

__host__ bool slice_advanced(void)
    {
    dim3 dg = dim3(64, 1, 1);
    dim3 db = dim3(64, 1, 1);

    int size = 1000000;

    double ary[size];

    for (int i = 0; i < size; i++){
	ary[i] = 0.0;
    }

    double* d_ary;
    cudaMalloc((void**)&d_ary, size*sizeof(double));
    cudaMemcpy(d_ary, ary, size * sizeof(double), cudaMemcpyHostToDevice);

    Device::lastCudaError("slice_host (before)"); // temp debug

    size_t sizeOGM = sizeof(double)*db.x;
    size_t sizeOSM = sizeof(double)*db.x;

    kernel_a<<<dg,db,sizeOGM>>>(size, d_ary);
    Device::lastCudaError("slice_host (after)"); // temp debug

    cudaMemcpy(ary, d_ary, size * sizeof(double), cudaMemcpyDeviceToHost);
    std::cout << "sum :" << (4.0 * reduction_simple(ary, size)) / size << std::endl;

    return true;
    }
